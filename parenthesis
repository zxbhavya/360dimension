#include <iostream>
#include <vector>
using namespace std;

class ParenthesesGenerator {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> result;
        generate(result, "", n, 0, 0);
        return result;
    }
    
private:
    void generate(vector<string>& result, string current, int n, int open, int close) {
        if (open == n && close == n) {
            result.push_back(current);
            return;
        }
        
        if (open < n) {
            generate(result, current + "(", n, open + 1, close);
        }
        
        if (close < open) {
            generate(result, current + ")", n, open, close + 1);
        }
    }
};

int main() {
    ParenthesesGenerator pg;
    vector<string> result = pg.generateParenthesis(3);
    for (string s : result) {
        cout << s << endl;
    }
    return 0;
}
